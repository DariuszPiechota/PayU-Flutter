// Mocks generated by Mockito 5.4.0 from annotations
// in payu_mastercard_installments/test/src/pages/options/mappers/installments_options_data_mapper_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:intl/number_symbols.dart' as _i2;
import 'package:intl/src/intl/number_format.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNumberSymbols_0 extends _i1.SmartFake implements _i2.NumberSymbols {
  _FakeNumberSymbols_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NumberFormat].
///
/// See the documentation for Mockito's code generation for more information.
class MockNumberFormat extends _i1.Mock implements _i3.NumberFormat {
  MockNumberFormat() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get negativePrefix => (super.noSuchMethod(
        Invocation.getter(#negativePrefix),
        returnValue: '',
      ) as String);

  @override
  String get positivePrefix => (super.noSuchMethod(
        Invocation.getter(#positivePrefix),
        returnValue: '',
      ) as String);

  @override
  String get negativeSuffix => (super.noSuchMethod(
        Invocation.getter(#negativeSuffix),
        returnValue: '',
      ) as String);

  @override
  String get positiveSuffix => (super.noSuchMethod(
        Invocation.getter(#positiveSuffix),
        returnValue: '',
      ) as String);

  @override
  int get maximumIntegerDigits => (super.noSuchMethod(
        Invocation.getter(#maximumIntegerDigits),
        returnValue: 0,
      ) as int);

  @override
  set maximumIntegerDigits(int? _maximumIntegerDigits) => super.noSuchMethod(
        Invocation.setter(
          #maximumIntegerDigits,
          _maximumIntegerDigits,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get minimumIntegerDigits => (super.noSuchMethod(
        Invocation.getter(#minimumIntegerDigits),
        returnValue: 0,
      ) as int);

  @override
  set minimumIntegerDigits(int? _minimumIntegerDigits) => super.noSuchMethod(
        Invocation.setter(
          #minimumIntegerDigits,
          _minimumIntegerDigits,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get maximumFractionDigits => (super.noSuchMethod(
        Invocation.getter(#maximumFractionDigits),
        returnValue: 0,
      ) as int);

  @override
  set maximumFractionDigits(int? _maximumFractionDigits) => super.noSuchMethod(
        Invocation.setter(
          #maximumFractionDigits,
          _maximumFractionDigits,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get minimumFractionDigits => (super.noSuchMethod(
        Invocation.getter(#minimumFractionDigits),
        returnValue: 0,
      ) as int);

  @override
  set minimumFractionDigits(int? _minimumFractionDigits) => super.noSuchMethod(
        Invocation.setter(
          #minimumFractionDigits,
          _minimumFractionDigits,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get minimumExponentDigits => (super.noSuchMethod(
        Invocation.getter(#minimumExponentDigits),
        returnValue: 0,
      ) as int);

  @override
  set minimumExponentDigits(int? _minimumExponentDigits) => super.noSuchMethod(
        Invocation.setter(
          #minimumExponentDigits,
          _minimumExponentDigits,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get significantDigitsInUse => (super.noSuchMethod(
        Invocation.getter(#significantDigitsInUse),
        returnValue: false,
      ) as bool);

  @override
  set significantDigitsInUse(bool? _significantDigitsInUse) =>
      super.noSuchMethod(
        Invocation.setter(
          #significantDigitsInUse,
          _significantDigitsInUse,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get multiplier => (super.noSuchMethod(
        Invocation.getter(#multiplier),
        returnValue: 0,
      ) as int);

  @override
  set currencyName(String? _currencyName) => super.noSuchMethod(
        Invocation.setter(
          #currencyName,
          _currencyName,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get currencySymbol => (super.noSuchMethod(
        Invocation.getter(#currencySymbol),
        returnValue: '',
      ) as String);

  @override
  int get localeZero => (super.noSuchMethod(
        Invocation.getter(#localeZero),
        returnValue: 0,
      ) as int);

  @override
  set significantDigits(int? x) => super.noSuchMethod(
        Invocation.setter(
          #significantDigits,
          x,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get locale => (super.noSuchMethod(
        Invocation.getter(#locale),
        returnValue: '',
      ) as String);

  @override
  _i2.NumberSymbols get symbols => (super.noSuchMethod(
        Invocation.getter(#symbols),
        returnValue: _FakeNumberSymbols_0(
          this,
          Invocation.getter(#symbols),
        ),
      ) as _i2.NumberSymbols);

  @override
  String simpleCurrencySymbol(String? currencyCode) => (super.noSuchMethod(
        Invocation.method(
          #simpleCurrencySymbol,
          [currencyCode],
        ),
        returnValue: '',
      ) as String);

  @override
  String format(dynamic number) => (super.noSuchMethod(
        Invocation.method(
          #format,
          [number],
        ),
        returnValue: '',
      ) as String);

  @override
  num parse(String? text) => (super.noSuchMethod(
        Invocation.method(
          #parse,
          [text],
        ),
        returnValue: 0,
      ) as num);

  @override
  void turnOffGrouping() => super.noSuchMethod(
        Invocation.method(
          #turnOffGrouping,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
